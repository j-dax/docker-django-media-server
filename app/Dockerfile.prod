# pull official base image
#       multi-stage build
#       https://docs.docker.com/develop/develop-images/multistage-build/
FROM python:3.8.3-alpine as builder

# set work directory
WORKDIR /usr/src/app

# set environment vars
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# update system image
RUN apk update \
    && apk add python3 postgresql-libs  \
    && apk add --update --no-cache --virtual .build-deps gcc python3-dev musl-dev alpine-sdk python3-dev musl-dev postgresql-dev libffi-dev

# lint
RUN pip install -U pip setuptools
RUN pip install flake8
COPY . .
RUN flake8 --ignore=E501,F401 .

# install dependencies
COPY ./requirements.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.txt

###############
# Final Image #
###############

FROM python:3.8.3-alpine

ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir -p $HOME

# create app group+user
RUN addgroup -S app && adduser -S app -G app

# ensure folder containers are available
RUN mkdir -p $APP_HOME/staticfiles
RUN mkdir -p $APP_HOME/mediafiles
WORKDIR $APP_HOME

# install deps
RUN apk update && apk add libpq gcc musl-dev alpine-sdk python3 python3-dev
RUN pip install --upgrade pip setuptools
COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /usr/src/app/requirements.txt .
RUN pip install --no-cache /wheels/*

# copy project
COPY ./entrypoint.prod.sh $APP_HOME
COPY . $APP_HOME

# chown all files to app group
RUN chown -R app:app $APP_HOME

# change to app user
USER app

# run entrypoint.sh
ENTRYPOINT ["/home/app/web/entrypoint.prod.sh"]